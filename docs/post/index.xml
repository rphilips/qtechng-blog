<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artikelen on QtechNG Blog</title>
    <link>https://rphilips.github.io/qtechng-blog/post/</link>
    <description>Recent content in Artikelen on QtechNG Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>nl-nl</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://rphilips.github.io/qtechng-blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CLI structure</title>
      <link>https://rphilips.github.io/qtechng-blog/post/clistructure/</link>
      <pubDate>Tue, 20 Oct 2020 11:54:54 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/clistructure/</guid>
      <description>Laten we even stil staan bij de werking van de QtechNG CLI.
Een typische invocatie is:
qtechng project co /core/python3 --version=6.00 --tree Er zijn essentieel 5 onderdelen.
Executable De werknaam is qtechng. Dit kan echter nog veranderen.
Het onderwerp Dit bevat het soort object waarover het commando gaat.
Op dit ogenblik hebben we de volgende onderwerpen:
 clipboard: acties in verband met het clipboard file: acties in verband met lokale bestanden project: acties in verband met QtechNG projecten registry: acties in verband met de registry source: acties in verband met bestanden in het repository stdin: acties in verband met stdin system: acties in verband met systeemconfiguratie tempdir: acties in verband met tijdelijke mappen version: acties in verband met de versie  QtechNG verzamelt ook eenvoudige instrumenten die het maken van scripts simpelder maken.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://rphilips.github.io/qtechng-blog/post/installation/</link>
      <pubDate>Thu, 08 Oct 2020 13:54:21 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/installation/</guid>
      <description>In deze blog bijdrage wil beschrijven wat er gebeurt bij een installatie.
Elke installatie begint met een verzameling van sources.
Deze sources zijn qpaths naar bestanden in het repository: bij een complete installatie van een release zijn dit simpelweg alle bestanden uit het repository. In het vervolg verwijzen we naar deze verzameling als de sourceset. Het moet steeds expliciet worden meegegeven aan het installatieproces of we te maken hebben met een complete of partiële installatie.</description>
    </item>
    
    <item>
      <title>Delete</title>
      <link>https://rphilips.github.io/qtechng-blog/post/delete/</link>
      <pubDate>Wed, 30 Sep 2020 17:04:58 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/delete/</guid>
      <description>Het schrappen van een bestand in QtechNG ?
Hoe moeilijk kan dat zijn ?
Wel, laten we stellen dat het een orde moeilijker is dan het opslaan van een bestand in QtechNG.
Probleem 1: Schrappen ? Wat betekent dit precies ? Elk bestand in QtechNG is gekenmerkt door een qpath.
Dergelijk qpath leidt, binnen een gegeven release, tot een plaats in het fileystem. Dit bestand moet worden verwijderd.
Een bestand komt ook met uniqueness informatie voor de basename.</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://rphilips.github.io/qtechng-blog/post/deployment/</link>
      <pubDate>Thu, 24 Sep 2020 15:16:12 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/deployment/</guid>
      <description>Tijd om het deployment scenario te bespreken!
In de context van deployment wil QtechNG vooral streven naar snelheid: als we willen dat Brocade meermaals per jaar een productie release oplevert, dan moet de technische kant van het verhaal snel en correct verlopen.
Het kan niet zijn dat een 3-tal mensen een ganse dag bezig zijn met een release te installeren op een productieserver: stel dat we werken met maandelijkse sprints, dan is dit soort operatie gewoonweg veel te inefficiënt.</description>
    </item>
    
    <item>
      <title>Setuid</title>
      <link>https://rphilips.github.io/qtechng-blog/post/setuid/</link>
      <pubDate>Thu, 03 Sep 2020 15:37:19 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/setuid/</guid>
      <description>Het probleem Setuid is een privilege elevation mechanism dat gangbaar is in de Unix/Linux wereld.
Als ik me niet vergis ontsproot het aan het creatieve brein van Dennis Ritchie, de ontwerper van de C programmeertaal.
Het systeem houdt zeker beveiligingsrisico&amp;rsquo;s in maar het is uiterst handig &amp;hellip; als het goed wordt aangewend.
In klassieke Linux/Unix (we laten even ACL&amp;rsquo;s buiten beschouwing) worden de mogelijkheden om om te gaan met de resources van een computer bepaald door wie je bent.</description>
    </item>
    
    <item>
      <title>Lgcode</title>
      <link>https://rphilips.github.io/qtechng-blog/post/lgcode/</link>
      <pubDate>Sun, 16 Aug 2020 12:11:55 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/lgcode/</guid>
      <description>Bij de constructie van Brocade software, worden teksten steeds ingegeven onder de vorm van tekstfragmenten.
Tekstfragmenten kunnen zowel in de software als in de Brocade toepassing worden gedefinieerd. Sommige van deze tekstfragmenten kunnen voor lokaal gebruik ook worden aangepast.
In de Brocade software worden tekstfragmenten aangemaakt in *.l bestanden: dit zijn speciaal gestructureerde bestanden die allen de extensie .l hebben.
Merk op!
Door middel van de notbrocade eigenschap uit brocade.json kan men *.</description>
    </item>
    
    <item>
      <title>Output</title>
      <link>https://rphilips.github.io/qtechng-blog/post/output/</link>
      <pubDate>Sat, 08 Aug 2020 10:11:15 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/output/</guid>
      <description>Najaar 2006.
Microsoft bracht een nieuwe shell uit, de PowerShell. Nogal wat Unix/Linux affecionados konden enkel een smalend schouderophalen opbrengen. Ik dacht daar toch anders over: Unix/Linux had een krachtig pipe-systeem waarbij toepassingen informatie konden uitwisselen door de output en input streams te ketenen.
Essentieel was deze informatie overdracht echter beperkt tot tekst.
Niet zo in PowerShell: daar konden heuse objecten worden getransfereerd. Het klinkt allemaal wat abstract, maar ik kan je het verschil het beste uitleggen met docman.</description>
    </item>
    
    <item>
      <title>Interludium: JSONPath</title>
      <link>https://rphilips.github.io/qtechng-blog/post/jsonpath/</link>
      <pubDate>Thu, 06 Aug 2020 16:56:55 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/jsonpath/</guid>
      <description>Het zoeken in tabulaire data hebben we aardig onder de knie: einde jaren &amp;lsquo;70, begin jaren &amp;lsquo;80, zagen we de ene query taal na de andere verschijnen. Op het einde van de rit bleef er SQL over. Niet dat er geen valabele alternatieven bestonden! Ik studeerde toen informatica en herinner me maar al te goed dat er nog heel wat andere kandidaten bestonden. Maar in het evenwicht tussen kracht en eenvoud, wist dit IBM geesteskind de gulden middenweg te vinden.</description>
    </item>
    
    <item>
      <title>Format</title>
      <link>https://rphilips.github.io/qtechng-blog/post/format/</link>
      <pubDate>Sun, 02 Aug 2020 13:23:14 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/format/</guid>
      <description>Formatter en linters worden nogal eens verward. Nochtans zijn ze essentieel verschillend: een linter verandert zelf de source code niet maar meldt waar er ergens iets schort. Een formatter gaat de code verfraaien zonder de betekenis te veranderen.
In middens van software ontwikkelaars zijn er 2 dingen waarmee je snel een heilige oorlog kunt ontketenen: editors en formatters. Met de komst van Go lijkt hier een abrupt einde aan gekomen: de designers - Turing Award winners - gebruiken een gezagsargument en zeggen: Go code moet er zo uitzien.</description>
    </item>
    
    <item>
      <title>Linter</title>
      <link>https://rphilips.github.io/qtechng-blog/post/lint/</link>
      <pubDate>Sun, 02 Aug 2020 13:23:14 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/lint/</guid>
      <description>Linters zijn een belangrijke onderdeel van QtechNG.
Een linter onderzoekt source code en meldt indien er iets schort aan de software. Er zijn zijn essentieel twee soorten berichten:
 De code is onwerkbaar: hij beantwoordt niet aan de vereisten van de specificatie De code is werkbaar maar is samengesteld tegen de afspraken in: de stijl van de software past niet.  Brocade werkt met een grote verscheidenheid aan specificaties: behalve aan goed gekende structuren (HTML, JSON, Python, reST, &amp;hellip;) zijn er ook minder gekende specificaties zoals M en interne formaten zoals X-files, D-files, L-files, B-files, I-files en M-files.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://rphilips.github.io/qtechng-blog/post/search/</link>
      <pubDate>Fri, 17 Jul 2020 19:44:58 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/search/</guid>
      <description>De meest gebruikte faciliteit van qtech is ongetwijfeld het zoeken in het software repository.
Dit moet nog beter (lees: sneller) worden in QtechNG.
De basis van de zoek-software is de volgende golang structuur:
type Query struct { Release string CmpRelease string Patterns []string Natures []string Cu []string Mu []string CtBefore string CtAfter string MtBefore string MtAfter string ToLower bool SmartCase bool Regexp bool PerLine bool Contains []string Any []func(qpath string, blob []byte) bool All []func(qpath string, blob []byte) bool } Attributen Elk van deze attributen stelt een specifiek type van zoeken voor.</description>
    </item>
    
    <item>
      <title>Naturen</title>
      <link>https://rphilips.github.io/qtechng-blog/post/natures/</link>
      <pubDate>Mon, 13 Jul 2020 16:11:09 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/natures/</guid>
      <description>Met QtechNG wordt er ook een classificatie van de bestanden geïntroduceerd.
Dit is in feite een formalisering van wat reeds jaar en dag gebruikt wordt door het ontwikkelteam.
Een bestand kan meerdere naturen hebben.
Deze naturen hebben verschillende functies:
 ze sturen de installatie ze zijn belangrijk voor m4/r4/i4 substitutie ze kunnen worden gebruikt bij queries  binary en text Deze naturen sluiten elkaar uit. Standaard wordt elk bestand als text beschouwd.</description>
    </item>
    
    <item>
      <title>Interludium: Het Brocade template systeem</title>
      <link>https://rphilips.github.io/qtechng-blog/post/template/</link>
      <pubDate>Wed, 24 Jun 2020 11:56:55 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/template/</guid>
      <description>Het Brocade Template System (BTS) is werkelijk uit zijn voegen gebarsten. Niet alleen worden de mogelijkheden nog geregeld uitgebreid maar ook de toepassingsgebieden nemen steeds toe.
BTS is het ideale niveau tussen programmeren enerzijds en metadatering anderzijds. Gebruikers hebben vrij snel door wat de grote contouren zijn van het template systeem. Het zit hem - net zoals bij programmeren - echter in de details, en dat vergt grondige kennis van de diverse mogelijkheden en, ja, ook enige creativiteit.</description>
    </item>
    
    <item>
      <title>Parallel</title>
      <link>https://rphilips.github.io/qtechng-blog/post/parallel/</link>
      <pubDate>Sun, 21 Jun 2020 10:58:25 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/parallel/</guid>
      <description>Een doelstelling van QtechNG is dat overkoepelende acties zoals de bootstrap en de sweep sneller verlopen.
Met sneller bedoel ik niet een 10% winst maar heb ik het eerder over 2 tot 3x zo snel.
Cruciale momenten in het leven met Brocade zijn de oplevering van nieuwe releases en het installeren van een nieuwe ontwikkelversies.
Beiden nemen nu uren in beslag. Niet alleen zou het een stuk comfortabeler zijn indien dit sneller zou kunnen, maar het zou bovendien de mogelijkheid scheppen om het aantal uitgebrachte releases drastisch op te voeren.</description>
    </item>
    
    <item>
      <title>Interludium: PEG parsers</title>
      <link>https://rphilips.github.io/qtechng-blog/post/peg/</link>
      <pubDate>Fri, 19 Jun 2020 18:55:55 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/peg/</guid>
      <description>PEG (Parser Expression Grammar) parsers gaan in QtechNG een belangrijke rol spelen. Als parser systeem is dit een vrij recente ontwikkeling: het basis artikel van Bryan Ford verscheen in 2004: toen waren de hoogdagen van parsers al lang voorbij. Ik herinner me nog de jaren &amp;lsquo;80 toen het fameuze boek Compilers: Principles, Techniques, and Tools van Aho en Ullman (en anderen) de de facto bijbel was.
PEG parsers kwamen onder mijn aandacht toen ik veel werkte met Lua: PEG technologie zat immers standaard ingebakken in de programmeertaal en bewezen daar hoe krachtig dit wel was.</description>
    </item>
    
    <item>
      <title>Tekst versus binair</title>
      <link>https://rphilips.github.io/qtechng-blog/post/textbinary/</link>
      <pubDate>Wed, 17 Jun 2020 19:21:17 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/textbinary/</guid>
      <description>Wat is een tekstbestand ? Een eenvoudige definitie is: een tekstbestand bestaat uitsluitend uit (Unicode) karakters. Het vervelende hierbij is dat je, behalve het tekstbestand en zijn inhoud, ook de encoding moet opgeven: als je CP-1252 gebruikt, is elk bestand tekst.
Om het onderscheid te maken in qtech, volgde ik een pragmatische benadering.
Ik werkte in 3 stappen:
  Had het bestand een filenaam een extensie en behoorde die extensie tot een bepaalde verzameling (vb.</description>
    </item>
    
    <item>
      <title>Virtuele filesystemen</title>
      <link>https://rphilips.github.io/qtechng-blog/post/vfs/</link>
      <pubDate>Wed, 10 Jun 2020 17:55:19 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/vfs/</guid>
      <description>Met deze blogbijdrage wil ik een lans breken voor een techniek die niet alleen een groot gebruikersgemak oplevert voor de ontwikkelaar maar ook een paar (dramatische) fouten kan voorkomen!
We gaan het hebben over Virtuele Filesystemen.
Een VFS vertrekt steeds van een reeds bestaand filesysteem: dat kan zijn het goed gekende filesysteem zoals het op je notebook staat, maar dat kan ook een Dropbox folder zijn, een simpele ZIP-file, of iets dat op AWS staat of op Google Drive.</description>
    </item>
    
    <item>
      <title>Source</title>
      <link>https://rphilips.github.io/qtechng-blog/post/source/</link>
      <pubDate>Tue, 09 Jun 2020 16:25:22 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/source/</guid>
      <description>Een bestand wegschrijven in het QtechNG repository ?
Dat kan toch niet zo moeilijk zijn!
Neen, het is inderdaad niet zo moeilijk maar je moet wel heel erg minutieus te werk gaan!
Ik wil beklemtonen dat deze bijdrage enkel gaat over gewone bestanden: met andere woorden het gaat niet over object definiërende bestanden (dat zijn de bestanden van de gedaante *.[ild]): we gaan die afzonderlijk bespreken.
Ook het installeren in de productieomgeving wordt niet behandeld: dus we gaan niet uitleggen hoe een bestand van de gedaante *.</description>
    </item>
    
    <item>
      <title>Interludium: Graphiz &amp; Dot</title>
      <link>https://rphilips.github.io/qtechng-blog/post/dot/</link>
      <pubDate>Sun, 07 Jun 2020 11:48:42 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/dot/</guid>
      <description>In de vorige blog post toonde ik een SVG.
Ik was eerst van plan deze met Inkscape aan te maken maar de goesting ging snel over. SVG is een XML toepassing en dat met de hand schrijven leek me nog minder appetijtelijk.
Ik herinnerde me dat het in Sphinx, ons documentatie platform, mogelijk is om grafen in te bedden en besloot om de technologie daarachter, eens van nabij te bekijken.</description>
    </item>
    
    <item>
      <title>Repository</title>
      <link>https://rphilips.github.io/qtechng-blog/post/repository/</link>
      <pubDate>Sat, 06 Jun 2020 14:56:03 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/repository/</guid>
      <description>QtechNG werkt met een software repository. De basis directory waarop dit repository rust, komt - u raadt het al - uit de registry: qtechng-repository-dir: vb. /library/repository
Deze directory - beschikbaar op alle productieservers en ontwikkelservers - wordt door root:db aangemaakt door Ansible met het commando:
export REPO=`delphi key qtechng-repository-dir` sudo mkdir -p $REPO sudo chown root $REPO sudo chgrp db $REPO sudo chmod 2770 $REPO Dit maakt dat het setgid bit van de directory wordt gezet: alle bestanden en directories gaan to groep db behoren.</description>
    </item>
    
    <item>
      <title>Ansible Automation Platform en Qtech</title>
      <link>https://rphilips.github.io/qtechng-blog/post/ansible/</link>
      <pubDate>Wed, 03 Jun 2020 10:50:56 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/ansible/</guid>
      <description>Deze blog-post van Luc gaat over het beheer van Ansible met Qtech(ng).
In 2016 hebben wij de afweging gemaakt tussen Salt en Ansible voor IT-automatisering. Salt leek op dat moment de beste keuze. De software had een lage leercurve en enorm veel integraties. Ansible daarentegen was toen de “new kid on the block” maar wel met veel potentieel !
Intussen heeft Ansible onder de vleugels van Red Hat een inhaalbeweging gemaakt en is vooral dankzij support van Red Hat het automatiseringsplatform geworden.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://rphilips.github.io/qtechng-blog/post/test/</link>
      <pubDate>Sun, 31 May 2020 16:45:31 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/test/</guid>
      <description>Dit is een bijdrage van Bart: interpreteer deze tekst als een overzicht van de problematiek. testen is een munt met verschillende kanten. Later worden deze van nabij besproken.
Inleiding In deze blog gaan we het hebben over het belang van softwaretesten op verschillende niveaus. Ik denk dat niemand overtuigd moeten worden van het belang maar het is wel belangrijk om de niveaus van softwaretesten te onderscheiden en zo ook communicatie er over te verbeteren.</description>
    </item>
    
    <item>
      <title>Vbox</title>
      <link>https://rphilips.github.io/qtechng-blog/post/vbox/</link>
      <pubDate>Wed, 27 May 2020 11:51:32 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/vbox/</guid>
      <description>Een virtuele machine of Docker ?
qtechng werkt essentieel steeds met 2 servers waarbij de ene machine de ontwikkelmachine (dev.anet.be: qtechtype == &amp;lsquo;B&amp;rsquo;) is en de andere ofwel je werkstation (qtechtype == &amp;lsquo;W&amp;rsquo;) ofwel een productiemachine (qtechtype == &amp;lsquo;P&amp;rsquo;).
Dat betekent dat je voor de ontwikkeling van qtechng ook moet kunnen beschikken over 2 machines. De aangewezen oplossing hiervoor is om op je werkstation ofwel een virtual machine ofwel een docker container op te zetten.</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>https://rphilips.github.io/qtechng-blog/post/ssh/</link>
      <pubDate>Tue, 26 May 2020 08:09:15 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/ssh/</guid>
      <description>Waarom gebruik je SSH in qtechng?
Wel, toen we in 1997 begonnen aan de bouw van Brocade, was dit niet zo!
We hadden daarvoor 2 redenen: een goede en een slechte.
Laten we beginnen met de slechte reden. Zoals steeds, als ik gegrepen ben door een idee, dan heb ik de neiging om dat idee tot in het extreme te volgen. In 1997, 1998 was ik er van overtuigd dat web technologie de wereld van informatiebeheerders ging bepalen.</description>
    </item>
    
    <item>
      <title>Cobra</title>
      <link>https://rphilips.github.io/qtechng-blog/post/cobra/</link>
      <pubDate>Sun, 24 May 2020 11:03:36 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/cobra/</guid>
      <description>Als je een goede CLI wil bouwen, moet je op zoek naar een goed framewerk.
Voor onze in-house Python code hebben we Toolcat maar voor een software gebaseerd op Go hadden we nog niet iets dergelijks.
Een paar jaar geleden volgen Luc en ik een tutorial over Go: het was een duizelingwekkende ervaring aan sneltrein-tempo gegeven door Steve Francia. Deze man werkt voor Google en was rechtstreeks betrokken bij het Go-project.</description>
    </item>
    
    <item>
      <title>Golang en QtechNG</title>
      <link>https://rphilips.github.io/qtechng-blog/post/golang/</link>
      <pubDate>Sat, 23 May 2020 14:43:35 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/golang/</guid>
      <description>Elke nieuwe versie van qtechng werd gemaakt met een nieuwe technologie: Awk, Makefiles, C, Perl en Python passeerden de revue.
De Python versie - zowel de commandline interface (CLI) als de GUI - deden het heel erg goed.
Er moet dan wel een heel goede reden zijn om dit succesverhaal te stoppen en te opteren voor een andere oplossing.
Mijns inziens zijn er diverse redenenen.
Opstarttijd Een eerste reden ligt in de opstarttijd van de huidige CLI.</description>
    </item>
    
    <item>
      <title>Registry</title>
      <link>https://rphilips.github.io/qtechng-blog/post/registry/</link>
      <pubDate>Fri, 22 May 2020 13:18:57 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/registry/</guid>
      <description>Brocade is verregaand geparametriseerd: meta-informatie bepaalt de specifieke functionaliteit en het uitzicht. Het minitieus parametriseren van een complex systeem kan enkel in een getrapt systeem en met verschillende technologieeen.
  Sommige meta-informatie wordt handmatig verzameld en zijn intrinsiek verbonden met de doelstellingen van een bibliotheeksysteem: catalografische beschrijvingen, gebruikersbeschrijvingen
  Om deze meta-informatie adequaat te beschrijven heb je instrumenten nodig. Er mee rekening houdend dat niet alle Brocade installaties volgens dezelfde procedures en richtlijnen werken, is er weer meta-informatie nodig om deze instrumenten scherp te stellen naar een specifieke situatie toe.</description>
    </item>
    
    <item>
      <title>Version</title>
      <link>https://rphilips.github.io/qtechng-blog/post/version/</link>
      <pubDate>Fri, 22 May 2020 10:00:23 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/version/</guid>
      <description>Voor software projecten die lang bestaan in de versie aanduiding belangrijk.
De communicatie rond de mogelijkheden van een software, worden gevoerd rond deze versie aanduiding. Release notes zijn bijvoorbeeld gecentreerd rondom een versie.
Niet zelden vinden versie aanduidingen hun weg naar contacten. Dat kan verschillende vormen aannemen: verplichtingen die gelden tot een versie (dit impliceert meteen dat er een zekere ordening bestaat in de versie aanduidingen), of het aantal releases die worden opgeleverd in een gegeven tijdspanne.</description>
    </item>
    
    <item>
      <title>Configuratie bestand</title>
      <link>https://rphilips.github.io/qtechng-blog/post/config/</link>
      <pubDate>Thu, 21 May 2020 10:30:43 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/config/</guid>
      <description>Elk qtechng project komt met een uniek configuratiebestand. Dit bestand bevindt zich steeds in de root-directory van het project en heeft een vaste naam brocade.json. (m.a.w. de qtechng path-naam van de configuratie file is steeds de qtechng path-naam van het project, aangevuld met brocade.json)
Dit bestand is een JSON bestand dat gestructureerd is volgens het schema qtechng.schema.json.
Dit heeft zo zijn voordelen: Visual Studio Code kan gebruik maken van deze specificatie om te helpen bij het editeren.</description>
    </item>
    
    <item>
      <title>Projecten</title>
      <link>https://rphilips.github.io/qtechng-blog/post/project/</link>
      <pubDate>Thu, 21 May 2020 08:59:12 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/project/</guid>
      <description>Projecten: een stand van zaken Brocade 5.00 telt meer dan 14000 bestanden.
Om beheer mogelijk te maken, moet hier structuur worden aangebracht. Het voornaamste structuurelement is het project. Een project staat voor een deelverzameling van deze bestanden, fysiek ondergebracht in een directory.
Van oudsher kent Brocade een thematische opsplitsing: zo werden bestanden rondom het bestellen van dingen gegroepeerd in projecten met namen als: /requests/impala, /requests/repository, /requests/virlib. Deze werden dan aangevuld met minder voor de hand liggende projecten zoals /requests/admin, /requests/gateway, &amp;hellip;</description>
    </item>
    
    <item>
      <title>[mlq]tech(ng)?</title>
      <link>https://rphilips.github.io/qtechng-blog/post/qtech/</link>
      <pubDate>Sun, 17 May 2020 13:23:43 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/qtech/</guid>
      <description>mtech/ltech/qtech/qtechng is het beheersinstrument van de Brocade software.
Al heel snel bleek dat we een adequaat instrument nodig hadden om de bibliotheeksoftware te beheren. Dit was al zo in het begin van de jaren &amp;lsquo;90 toen we nog automatiseerden met Vubis.
Ook in die dagen hadden we al heel wat software die eigen was aan de Universiteit Antwerpen en de bibliotheken die toen deel uitmaakten van Vubis Antwerpen: er was natuurlijk het Impala project met VirLib, Agrippa (onze archiefsoftware).</description>
    </item>
    
    <item>
      <title>Brocade</title>
      <link>https://rphilips.github.io/qtechng-blog/post/brocade/</link>
      <pubDate>Sun, 17 May 2020 11:10:47 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/brocade/</guid>
      <description>Deze blogbijdrage gaat over Brocade.
Ik ga niet uitleggen wat de functionaliteit is die de Brocade software aanbiedt: daarvoor kan je veel beter terecht op de Wikipedia pagina.
Deze tekst gaat over de software zelf: wat designprincipe zijn, hoeveel software er is en hoe deze wordt beheerd.
Het belangrijkste principe is wel dat Brocade een werk van lange adem is. De wereld van (wetenschappelijke) bibliotheken en archieven verandert razendsnel. Dit gaat samen met de aard van informatieverschaffing maar evengoed met het veranderend statuut en aanzien van wetenschapsbeoefenaars.</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://rphilips.github.io/qtechng-blog/post/blog/</link>
      <pubDate>Fri, 01 May 2020 16:55:43 +0200</pubDate>
      
      <guid>https://rphilips.github.io/qtechng-blog/post/blog/</guid>
      <description>Deze blog gaat over Brocade en qtech(ng).
Er zijn verschillende redenen waarom ik deze blog opstart:
  In de eerste plaats wil ik discussieteksten aanreiken. In ben volop bezig met de constructie van de nieuwe qtech. Dit is een belangrijk, veelzijdig instrument dat voor een groot gedeelte het comfort van de ontwikkelaars van Brocade bepaalt. Deze discussies kunnen de uitbouw van qtechng sterk beïnvloeden. Het stopt echter daar niet: zoals elk goed instrument, reikt qtechng verschillende manieren van ontplooiing aan.</description>
    </item>
    
  </channel>
</rss>